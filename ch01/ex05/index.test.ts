import { abs, sum, factorial } from "./index.ts";

describe("math", () => {
  describe("abs", () => {
    it("returns same value when positive value given", () => {
      expect(abs(42)).toBe(42);
    });
    it("returns negated value when negative value given", () => {
      expect(abs(-42)).toBe(42);
    });
    it("returns zero value when zero given", () => {
      expect(abs(0)).toBe(0);
    });
    it("return Number.MAX_VALUE when -Number.MAX_VALUE given", () => {
      expect(abs(-Number.MAX_VALUE)).toBe(Number.MAX_VALUE);
    });
    it("return 1e-77 when -1e-77 given", () => {
      expect(abs(-1e-77)).toBe(1e-77);
    });
    it("return 0 when 1e-55555 given", () => {
      expect(abs(1e-55555)).toBe(0);
    });
    it("return Infinity when Infinity given", () => {
      expect(abs(Infinity)).toBe(Infinity);
    });
  });

  describe("sum", () => {
    it("should return 0 when given blank array", () => {
      expect(sum([])).toBe(0);
    });
    it("should return 55 when given [1,2,3,4,5,6,7,8,9,10]", () => {
      expect(sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).toBe(55);
    });
    it("should return 10000 when given Array(10000).fill(1)", () => {
      expect(sum(new Array(10000).fill(1))).toBe(10000);
    });
    it("should return NaN when given [Infinity, -Infinity]", () => {
      expect(sum([Infinity, -Infinity])).toBe(NaN);
    });
    it("should return nearly 1.0 when given Array(10000).fill(1e-4)", () => {
      expect(sum(new Array(10000).fill(1e-4))).toBeCloseTo(1);
    });
    it("should return 0.0 when given [-0.0001, 0.0001, 200, -200]", () => {
      expect(sum([-0.0001, 0.0001, 200, -200])).toBe(0.0);
    });
    it("should return 0.0 when given [1.2, 3.3, 4.4, 5.5]", () => {
      expect(sum([1.2, 3.3, 4.4, 5.5])).toBe(14.4);
    });
    it("should return 0.0 when given [1.2, 3.3, 4.4, 5.5]", () => {
      expect(sum([1.2, 0xff])).toBe(256.2);
    });
    it("should return NaN when given [NaN]", () => {
      expect(sum([NaN])).toBe(NaN);
    });
    it("should return NaN when given [NaN, -NaN]", () => {
      expect(sum([NaN, -NaN])).toBe(NaN);
    });
    it("should return NaN when given [NaN, Infinity]", () => {
      expect(sum([NaN, Infinity])).toBe(NaN);
    });
    it("should return 0 when given [-0]", () => {
      expect(sum([-0])).toBe(0);
    });
  });

  describe("factorial", () => {
    it("should return 1n when 0n given", () => {
      expect(factorial(0n)).toBe(1n);
    });
    it("should return 3628800n when 10n given", () => {
      expect(factorial(10n)).toBe(3628800n);
    });
    it("should return 40238...n when 1000n given", () => {
      expect(factorial(1000n)).toBe(
n,
      );
    });
    it("should return undefined when -2n given", () => {
      expect(factorial(-2n)).toBe(undefined);
    });
    it("should return undefined when 2n**53n given", () => {
      expect(factorial(2n ** 53n)).toBe(undefined);
    });
    it("should return 1n when -0n given", () => {
      expect(factorial(-0n)).toBe(1n);
    });
  });
});
